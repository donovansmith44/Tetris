class LPiece{
	field int x1, y1, x2, x3, y2, y3, y4, size, orientation;

	constructor LPiece new(int Ax, int Ay, int Asize){
	let orientation = 0;
	let size = Asize;
	let x1 = Ax;
	let y1 = Ay;
	let x2 = x1+size;
	let y2 = y1+size;
	let x3 = x2+size;
	let y3 = y2+size;
	let y4 = y3+size;
	return this;
	}
	
	method void draw(){
	do Screen.setColor(1);
	if(orientation = 0){
	   do Screen.drawRectangle(x1, y1, x2, y2); //topmost piece
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //middle piece
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); //bottom piece
	   do Screen.drawRectangle(x2+2, y3+4, x3+2, y4+4); //l piece
	}
	if(orientation = 1){
	   do Screen.drawRectangle(x1, y1, x2, y2); //top mid
	   do Screen.drawRectangle(x2+2, y1, x3+2, y2); //top right
	   do Screen.drawRectangle(x1-size-2, y1, x1-2, y2); //top left
	   do Screen.drawRectangle(x1-size-2, y2+2, x1-2, y3+2); //bottom left
	}
	if(orientation = 2){
	   do Screen.drawRectangle(x1, y1, x2, y2); //topmost piece
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //middle piece
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); //bottom piece
	   do Screen.drawRectangle(x1-size-2, y1, x1-2, y2); //l piece
	}
	if(orientation = 3){
	   do Screen.drawRectangle(x1, y1, x2, y2); //top right
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //bottom right
	   do Screen.drawRectangle(x1-size-2, y2+2, x1-2, y3+2); //bottom mid
	   do Screen.drawRectangle(x1-size-size-4, y2+2, x1-size-4, y3+2); //bottom left
	}
	return;
	}
	
	method void erase(){
	do Screen.setColor(0);
	if(orientation = 0){
	   do Screen.drawRectangle(x1, y1, x2, y2); //topmost piece
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //middle piece
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); //bottom piece
	   do Screen.drawRectangle(x2+2, y3+4, x3+2, y4+4); //l piece
	}
	if(orientation = 1){
	   do Screen.drawRectangle(x1, y1, x2, y2); //top mid
	   do Screen.drawRectangle(x2+2, y1, x3+2, y2); //top right
	   do Screen.drawRectangle(x1-size-2, y1, x1-2, y2); //top left
	   do Screen.drawRectangle(x1-size-2, y2+2, x1-2, y3+2); //bottom left
	}
	if(orientation = 2){
	   do Screen.drawRectangle(x1, y1, x2, y2); //topmost piece
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //middle piece
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); //bottom piece
	   do Screen.drawRectangle(x1-size-2, y1, x1-2, y2); //l piece
	}
	if(orientation = 3){
	   do Screen.drawRectangle(x1, y1, x2, y2); //top right
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); //bottom right
	   do Screen.drawRectangle(x1-size-2, y2+2, x1-2, y3+2); //bottom mid
	   do Screen.drawRectangle(x1-size-size-4, y2+2, x1-size-4, y3+2); //bottom left
	}
	return;
	}

	method void incy(){
	let y1 = y1 + 1;
	let y2 = y1 + size;
	let y3 = y2 + size;
	let y4 = y3 + size;
	return;
	}
	
	method void moveRight(){
	   let x1 = x1 + 16;
	   let x2 = x1 + size;
	   let x3 = x2 + size;
	   do Sys.wait(100);
	return;
	}

	method void moveLeft(){
	   let x1 = x1-16;
	   let x2 = x1 + size;
	   let x3 = x2 + size;
	do Sys.wait(100);
	return;
	}

	method bool canMoveDown(){
	if(orientation = 0){
		if( (Memory.peek(16384 + Math.multiply(y4+6,32) + Math.divide(x1,16)) = 0) & (Memory.peek(16384 + Math.multiply(y4+6,32) + Math.divide(x3,16)) = 0) ){return true;}
	}
	if(orientation = 1){
		if( (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1-size-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x3,16)) = 0)){return true;}
	}
	if(orientation = 2){
		if( (Memory.peek(16384 + Math.multiply(y4+6,32) + Math.divide(x1+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1-size-2,16)) = 0) ){return true;}
	}
	if(orientation = 3){
		if( (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1-size-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1-size-size-4,16)) = 0)){return true;}
	}
	return false;
	}

	method bool canMoveRight(){
	if(orientation = 0){
		if( (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x2+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y4+4,32) + Math.divide(x3+4,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x2+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x2+2,16)) = 0)){return true;}
	}
	if(orientation = 1){
		if( (Memory.peek(16384 + Math.multiply(y3,32) + Math.divide(x1+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2,32) + Math.divide(x3+4,16)) = 0)){return true;}
	}
	if(orientation = 2){
		if( (Memory.peek(16384 + Math.multiply(y1+2,32) + Math.divide(x2+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1+2,16)) = 0) ){return true;}
	}
	if(orientation = 3){
		if( (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x2+2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x2+2,16)) = 0)){return true;}
	}
	return false;
	}

	method bool canMoveLeft(){
	if(orientation = 0){
		if( (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x1-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y4+4,32) + Math.divide(x1-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+4,32) + Math.divide(x1-2,16)) = 0)){return true;}
	}
	if(orientation = 1){
		if( (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x1-size-4,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1-size-4,16)) = 0)){return true;}
	}
	if(orientation = 2){
		if( (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x1-size-4,16)) = 0) & (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1-2,16)) = 0) & (Memory.peek(16384 + Math.multiply(y3+2,32) + Math.divide(x1-2,16)) = 0) ){return true;}
	}
	if(orientation = 3){
		if( (Memory.peek(16384 + Math.multiply(y2+2,32) + Math.divide(x1-size-size-6,16)) = 0) & (Memory.peek(16384 + Math.multiply(y1,32) + Math.divide(x1-2,16)) = 0)){return true;}
	}
	return false;
	}

	method void changeOrientation(){
	if(orientation = 0)
	{
//	if((Memory.peek(16384+Math.multiply(y1+8,32)+Math.divide(x1,16)) = 0) & (y1+8) < 248){
	let orientation = 1;
	do Sys.wait(150);
	return;
//	}
	}

	if(orientation = 1)
	{
//	if((Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x1+8,16)) = 0) & (x1+8) < 336){
	let orientation = 2;
	do Sys.wait(150);
	return;
//	}
	}

	if(orientation = 2)
	{
//	if((Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x1+8,16)) = 0) & (x1+8) < 336){
	let orientation = 3;
	do Sys.wait(150);
	return;
//	}
	}

	if(orientation = 3)
	{
//	if((Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x1+8,16)) = 0) & (x1+8) < 336){
	let orientation = 0;
	do Sys.wait(150);
	return;
//	}
	}
	return;
	}

}