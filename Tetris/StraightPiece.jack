class StraightPiece{	
	field int x1, y1, x2, y2, x3, y3, x4, y4,x5, y5, size, orientation;

	constructor StraightPiece new(int Ax, int Ay, int Asize){
	let orientation = 0;
	let x1 = Ax;
	let y1 = Ay;
	let size = Asize;
	let x2 = x1 + size;
	let y2 = y1 + size;
	let y3 = y2 + size;
	let x3 = x2 + size;
	let y4 = y3 + size;
	let x4 = x3 + size;
	let x5 = x4 + size;
	let y5 = y4 + size;
	return this;
	}
	
	method void drawStraightPiece(){
	do Screen.setColor(1);
	if(orientation = 0){
	   do Screen.drawRectangle(x1, y1, x2, y2); //leftmost piece
	   do Screen.drawRectangle(x2+2, y1, x3+2, y2); //2nd from left
	   do Screen.drawRectangle(x3+4, y1, x4+4, y2); //2nd from right
	   do Screen.drawRectangle(x4+6, y1, x5+6, y2); //2nd from right
	}
	else{
	   do Screen.drawRectangle(x1, y1, x2, y2); //top
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); 
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); 
	   do Screen.drawRectangle(x1, y4+6, x2, y5+6);
	}
	   return;
	}

	method void eraseStraightPiece(){
	do Screen.setColor(0);
	if(orientation = 0){
	   do Screen.drawRectangle(x1, y1, x2, y2); //leftmost piece
	   do Screen.drawRectangle(x2+2, y1, x3+2, y2); //2nd from left
	   do Screen.drawRectangle(x3+4, y1, x4+4, y2); //2nd from right
	   do Screen.drawRectangle(x4+6, y1, x5+6, y2); //2nd from right
	}
	else{
	   do Screen.drawRectangle(x1, y1, x2, y2); //top
	   do Screen.drawRectangle(x1, y2+2, x2, y3+2); 
	   do Screen.drawRectangle(x1, y3+4, x2, y4+4); 
	   do Screen.drawRectangle(x1, y4+6, x2, y5+6);
	}
	   return;
	}
	
	method void dispose(){
	do Memory.deAlloc(this);
	return;
	}

	method void incy(){
	let y1 = y1+1;
	let y2 = y1 + size;
	let y3 = y2 + size;
	let y4 = y3 + size;
	let y5 = y4 + size;
	return;
	}
	
	method void moveRight(){
	   let x1 = x1 + 16;
	   let x2 = x1 + size;
	   let x3 = x2 + size;
	   let x4 = x3 + size;
	   let x5 = x4 + size;
	   do Sys.wait(100);
	return;
	}
	
	method void moveLeft(){
	   let x1 = x1-16;
	   let x2 = x1 + size;
	   let x3 = x2 + size;
	   let x4 = x3 + size;
	   let x5 = x4 + size;
	do Sys.wait(100);
	return;
	}

	method bool canMoveDown(){
	if(orientation = 0){ //if horizontal
	   if ( (Memory.peek(16384+Math.multiply(y1+16,32)+Math.divide(x1,16)) = 0) & (Memory.peek(16384+Math.multiply(y1+16,32)+Math.divide(x2,16)) = 0) & (Memory.peek(16384+Math.multiply(y1+16,32)+Math.divide(x3,16)) = 0) & (Memory.peek(16384+Math.multiply(y1+16,32)+Math.divide(x4,16)) = 0) & (Memory.peek(16384+Math.multiply(y1+16,32)+Math.divide(x5,16)) = 0) ){  //if the nearest block is not zero
	   return true;
	   }
	}

	if (orientation = 1){ //if vertical
	   if (Memory.peek(16384+Math.multiply(y5+8,32)+Math.divide(x1,16)) = 0){
	   return true;
	   }
	}
   	   return false;
	}

	method bool canMoveLeft(){
	if(orientation = 0){
	if (Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x1-2,16)) = 0){  //if the nearest block is not zero
	   return true;
	   }
	}
	if(orientation = 1){
	if ( (Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x1-2,16)) = 0) & (Memory.peek(16384+Math.multiply(y2,32)+Math.divide(x1-2,16)) = 0) & (Memory.peek(16384+Math.multiply(y3,32)+Math.divide(x1-2,16)) = 0) & (Memory.peek(16384+Math.multiply(y4,32)+Math.divide(x1-2,16)) = 0) & (Memory.peek(16384+Math.multiply(y5,32)+Math.divide(x1-2,16)) = 0)){  //if the nearest block is not zero
	   return true;
	   }
	
	}
   	   return false;
	}

	method bool canMoveRight(){
	if(orientation = 0){
	if (Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x5+8,16)) = 0){  //if the nearest block is not zero
	   return true;
	   }
	}
	if(orientation = 1){
	if ( (Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x2+2,16)) = 0) & (Memory.peek(16384+Math.multiply(y2,32)+Math.divide(x2+2,16)) = 0) & (Memory.peek(16384+Math.multiply(y3,32)+Math.divide(x2+2,16)) = 0) & (Memory.peek(16384+Math.multiply(y4,32)+Math.divide(x2+2,16)) = 0) & (Memory.peek(16384+Math.multiply(y5,32)+Math.divide(x2+2,16)) = 0)){  //if the nearest block is not zero
	   return true;
	   }
	
	}
   	   return false;
	}
	
	method void changeOrientation(){
	if(orientation = 0)
	{
	if((Memory.peek(16384+Math.multiply(y5+8,32)+Math.divide(x1,16)) = 0) & (y5+8) < 248){
	let orientation = 1;
	}
	}
	else
	{
	if((Memory.peek(16384+Math.multiply(y1,32)+Math.divide(x5+8,16)) = 0) & (x5+8) < 336){
	let orientation = 0;
	}
	}
	do Sys.wait(150);
	return;
	}

}
